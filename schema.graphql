type NftContract @entity {
  id: ID!
  name: String!
  symbol: String!
  category: String!
  createdAt: BigInt!
  nfts: [Nft!]! @derivedFrom(field: "contract")
  searchText: String!
  royalties: BigInt
  royaltiesRecipient: Bytes
}

type NftOwnership @entity {
  id: ID!
  account: Bytes!
  nft: Nft
  value: BigInt!

  #copy fields from nft because graph can't filter / sort on child collection
  nftContractId: Bytes!
  nftCategory: String
  nftPrice: BigInt!
  nftBurned: Boolean!
  nftCreatedAt: BigInt!
  nftListedAt: BigInt!
  nftIsOnSale: Boolean!
}

type Nft @entity {
  id: ID!
  contract: NftContract!
  tokenId: BigInt!
  type: String! #erc-721 or erc-1155
  artistId: Bytes
  category: String
  burned: Boolean!
  updatedAt: BigInt!
  createdAt: BigInt!

  #specific royalties for this nft
  royalties: BigInt

  #listing
  listedAt: BigInt!
  isOnSale: Boolean!
  price: BigInt!
  lastSalePrice: BigInt
  auctionIds: [String!]!

  #metadata
  tokenURI: String
  name: String
  description: String
  image: String
  thumbnail: String
  attributes: [NftAttribute!] @derivedFrom(field: "nft")

  #denormalized for performance
  contractId: Bytes!
  contractName: String

  searchText: String

  ownership: [NftOwnership!] @derivedFrom(field: "nft")
  auctions: [Auction!] @derivedFrom(field: "nft")
  bids: [Bid!] @derivedFrom(field: "nft")

  #for erc-1155
  supply: BigInt
}

type NftAttribute @entity {
  id: ID!
  nft: Nft!
  contractId: Bytes!
  type: String
  value: String
}

type Auction @entity {
  id: ID!
  seller: Bytes!
  buyer: Bytes
  startingPrice: BigInt!
  endingPrice: BigInt!
  duration: BigInt!
  startedAt: BigInt!
  nft: Nft!
  tokenAmount: BigInt!
  soldTokenAmount: BigInt!
  totalPrice: BigInt
}

type Bid @entity {
  id: ID!
  nft: Nft!
  bidder: Bytes!
  price: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
}

type Activity @entity {
  id: ID!
  nft: Nft
  type: ActivityType!
  createdAt: BigInt!
  transactionHash: Bytes!
  from: Bytes! #address of user who initiated activity
  #transfer activity
  transferFrom: Bytes
  transferTo: Bytes
  #auction activity
  auctionSeller: Bytes
  auctionBuyer: Bytes
  auctionStartingPrice: BigInt
  auctionTotalPrice: BigInt
  auctionFee: BigInt
  #bid activity
  bidBidder: Bytes
  bidPrice: BigInt
}

type CollectionHistoricData @entity {
  id: ID! # collection address
  totalCount: BigInt!
  onSaleCount: BigInt!
  volumeTraded: BigInt!
}

type UserHistoricData @entity {
  id: ID! # user address
  createdCount: BigInt!
  ownedCount: BigInt!
  onSaleCount: BigInt!
  makerVolume: BigInt!
  takerVolume: BigInt!
}

type CollectionDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!
  contractId: Bytes!
  volumeTraded: BigInt!
}

type UserDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!
  accountId: Bytes!
  makerVolume: BigInt!
  takerVolume: BigInt!
}

enum ActivityType @entity {
  mint
  burn
  transfer
  auctionCreate
  auctionSuccess
  auctionCancel
  bidCreate
  bidAccept
  bidCancel
}
