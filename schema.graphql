type Account @entity {
  id: ID!
  address: Bytes!
  nftOwnership: [NftOwnership!] @derivedFrom(field: "account")
  createdNfts: [Nft!] @derivedFrom(field: "artist")
  auctions: [Auction!] @derivedFrom(field: "seller")
  offers: [Offer!] @derivedFrom(field: "bidder")
}

type NftContract @entity {
  id: ID!
  name: String!
  symbol: String!
  category: String!
  createdAt: BigInt!
  searchText: String!
  royalties: BigInt
  royaltiesRecipient: Bytes
  nfts: [Nft!]! @derivedFrom(field: "contract")
  offers: [Offer!] @derivedFrom(field: "nftContract")
}

type NftOwnershipPerContract @entity {
  id: ID!
  account: Account!
  contract: NftContract!
  tokensCount: BigInt!
}

type NftOwnership @entity {
  id: ID!
  account: Account!
  nft: Nft
  value: BigInt!

  #copy fields from nft because graph can't filter / sort on child collection
  nftContractId: Bytes!
  nftCategory: String
  nftPrice: BigInt!
  nftBurned: Boolean!
  nftCreatedAt: BigInt!
  nftListedAt: BigInt!
  nftIsOnSale: Boolean!
  nftPaymentErc20TokenAddress: Bytes!
}

type Nft @entity {
  id: ID!
  contract: NftContract!
  tokenId: BigInt!
  type: String! #erc-721 or erc-1155
  artist: Account
  artistId: Bytes
  category: String
  burned: Boolean!
  updatedAt: BigInt!
  createdAt: BigInt!

  #specific royalties for this nft
  royalties: BigInt

  #listing
  listedAt: BigInt!
  isOnSale: Boolean!
  price: BigInt!
  lastSalePrice: BigInt
  auctionIds: [String!]!
  paymentErc20TokenAddress: Bytes!

  #metadata
  tokenURI: String
  name: String
  description: String
  image: String
  thumbnail: String
  attributes: [String!]
  blockchain: String!

  #denormalized for performance
  contractId: Bytes!
  contractName: String

  searchText: String

  #for erc-1155
  supply: BigInt

  ownership: [NftOwnership!] @derivedFrom(field: "nft")
  auctions: [Auction!] @derivedFrom(field: "nft")
  offers: [Offer!] @derivedFrom(field: "nft")
}

type Auction @entity {
  id: ID!
  seller: Account!
  buyer: Bytes
  paymentErc20TokenAddress: Bytes!
  startingPrice: BigInt!
  endingPrice: BigInt!
  isDutch: Boolean!
  startedAt: BigInt!
  endingAt: BigInt!
  nft: Nft!
  tokenAmount: BigInt!
  soldTokenAmount: BigInt!
  totalPrice: BigInt
  sourceVersion: SourceVersion!
}

type Offer @entity {
  id: ID!
  nft: Nft
  nftContract: NftContract!
  bidder: Account!
  paymentErc20TokenAddress: Bytes!
  price: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
  isForCollection: Boolean!
  sourceVersion: SourceVersion!
}

type Activity @entity {
  id: ID!
  nft: Nft
  nftContract: NftContract
  type: ActivityType!
  createdAt: BigInt!
  transactionHash: Bytes!
  initiator: Account! #address of user who initiated activity
  from: Account #This field is account that unifies “transferFrom, auctionSeller and offerAccepter depending of activity type
  to: Account #This field is account that unifies “transferTo, auctionBuyer and offerBidder depending of activity type
  price: BigInt #This field is price that unifies "offerPrice, privatePrice and auction starting price (if dutch auction); Depending on activity type"
  totalPrice: BigInt #This field is total price that unifies "offerPrice, privatePrice and auction starting price (if dutch auction); Plus fee depending on activity type"
  fee: BigInt #This field is fee that we get after auctionSuccess, offerAccept or privateSaleSuccess events
  paymentErc20TokenAddress: Bytes
  #auction activity
  auctionStartingPrice: BigInt
}

type CollectionHistoricData @entity {
  id: ID! # collection address
  totalCount: BigInt!
  onSaleCount: BigInt!
  volumeTraded: BigInt!
  ownersCount: BigInt!
  floorPrice: BigInt
  floorPriceTracker: [BigInt!]
  erc20Volumes: [Erc20Volume!] @derivedFrom(field: "collectionHistoricData")
}

type UserHistoricData @entity {
  id: ID! # user address
  createdCount: BigInt!
  ownedCount: BigInt!
  onSaleCount: BigInt!
  makerVolume: BigInt!
  takerVolume: BigInt!
  erc20Volumes: [Erc20Volume!] @derivedFrom(field: "userHistoricData")
}

type CollectionHourData @entity {
  ##timestamp rounded to nearest hour
  id: ID!
  epoch: Int!
  contractId: Bytes!
  volumeTraded: BigInt!
  paymentErc20TokenAddress: Bytes
}

type UserHourData @entity {
  ##timestamp rounded to nearest hour
  id: ID!
  epoch: Int!
  accountId: Account!
  makerVolume: BigInt!
  takerVolume: BigInt!
  paymentErc20TokenAddress: Bytes
}

type Erc20Volume @entity {
  id: ID!
  volumeTraded: BigInt!
  makerVolume: BigInt!
  takerVolume: BigInt!
  paymentErc20TokenAddress: String
  userHistoricData: UserHistoricData
  collectionHistoricData: CollectionHistoricData
}

enum SourceVersion @entity {
  V1
  V2
}

enum ActivityType @entity {
  mint
  burn
  transfer
  auctionCreate
  auctionSuccess
  auctionCancel
  offerCreate
  offerAccept
  offerCancel
  reserveBid
}
