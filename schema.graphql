type NFTContract @entity {
  id: ID!
  name: String!
  symbol: String!
  category: String!
  createdAt: BigInt!
  nfts: [NFT!]! @derivedFrom(field: "contract")
  searchText: String!
  royalties: BigInt
  royaltiesRecipient: Bytes
}

type NFTOwnership @entity {
  id: ID!
  account: Bytes!
  nft: NFT
  value: BigInt!

  #copy fields from nft because graph can't filter / sort on child collection
  nftContractId: Bytes!
  nftCategory: String
  nftPrice: BigInt!
  nftBurned: Boolean!
  nftCreatedAt: BigInt!
  nftListedAt: BigInt!
  nftIsOnSale: Boolean!
}

type NFT @entity {
  id: ID!
  contract: NFTContract!
  tokenId: BigInt!
  artistId: Bytes
  category: String
  ownership: [NFTOwnership!] @derivedFrom(field: "nft")
  updatedAt: BigInt!
  createdAt: BigInt!
  listedAt: BigInt!
  auctions: [Auction!] @derivedFrom(field: "nft")
  bids: [Bid!] @derivedFrom(field: "nft")
  auctionIds: [String!]!
  burned: Boolean!
  royalties: BigInt

  isOnSale: Boolean!
  price: BigInt!
  lastSalePrice: BigInt

  #erc-1155
  supply: BigInt

  #metadata
  tokenURI: String
  name: String
  description: String
  image: String
  thumbnail: String
  attributes: [NftAttribute!] @derivedFrom(field: "nft")

  #denormalized for performance
  contractId: Bytes!
  contractName: String

  type: String!
  searchText: String
}

type NftAttribute @entity {
  id: ID!
  nft: NFT!
  contractId: Bytes!
  type: String
  value: String
}

type Auction @entity {
  id: ID!
  seller: Bytes!
  buyer: Bytes
  startingPrice: BigInt!
  endingPrice: BigInt!
  duration: BigInt!
  startedAt: BigInt!
  nft: NFT!
  tokenAmount: BigInt!
  soldTokenAmount: BigInt!
  totalPrice: BigInt
}

type Bid @entity {
  id: ID!
  nft: NFT!
  bidder: Bytes!
  price: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
}

type Activity @entity {
  id: ID!
  nft: NFT
  type: String!
  createdAt: BigInt!

  #transfer activity
  transferFrom: Bytes
  transferTo: Bytes

  #auction activity
  auctionSeller: Bytes
  auctionBuyer: Bytes
  auctionStartingPrice: BigInt
  auctionTotalPrice: BigInt
  auctionFee: BigInt

  #bid activity
  bidBidder: Bytes
  bidPrice: BigInt

  transactionHash: Bytes!
  from: Bytes!
}

type CollectionStatistic @entity {
  id: ID!
  totalCount: BigInt!
  onSaleCount: BigInt!
  volumeTraded: BigInt!
}

type UserStatistic @entity {
  id: ID!
  createdCount: BigInt!
  ownedCount: BigInt!
  onSaleCount: BigInt!
  makerVolume: BigInt!
  takerVolume: BigInt!
}

type CollectionDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!
  contractId: Bytes!
  volumeTraded: BigInt!
}

type UserDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!
  accountId: Bytes!
  makerVolume: BigInt!
  takerVolume: BigInt!
}

enum ActivityType @entity {
  mint
  burn
  transfer
  auctionCreate
  auctionSuccess
  auctionCancel
  bidCreate
  bidAccept
  bidCancel
}
